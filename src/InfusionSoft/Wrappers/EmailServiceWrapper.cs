//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfusionSoft
{
    using Definition;
    
    
    internal partial class EmailServiceWrapper : ServiceBase<IEmailServiceDefinition>, IEmailService
    {

        public EmailServiceWrapper(InfusionSoft.IInfusionSoftConfiguration configuration, IMethodListenerProvider listenerProvider) :
            base(configuration, listenerProvider)
        {
        }
        
        public virtual int AddEmailTemplate(string pieceTitle, string categories, string toAddress, string ccAddress, string bccAddress, string subject, string textBody, string htmlBody, string contentType, string mergeContext)
        {
            return Invoke(d => d.AddEmailTemplate(ApiKey, pieceTitle, categories, toAddress, ccAddress, bccAddress, subject, textBody, htmlBody, contentType, mergeContext));
        }
        
        public virtual bool AttachEmail(int contactId, string fromName, string fromAddress, string toAddress, string ccAddresses, string bccAddresses, string contentType, string subject, string htmlBody, string textBody, string header, string receivedDate, string sentDate, int emailSentType)
        {
            return Invoke(d => d.AttachEmail(ApiKey, contactId, fromName, fromAddress, toAddress, ccAddresses, bccAddresses, contentType, subject, htmlBody, textBody, header, receivedDate, sentDate, emailSentType));
        }
        
        public virtual string[] GetAvailableMergeFields(string mergeContext)
        {
            return Invoke(d => d.GetAvailableMergeFields(ApiKey, mergeContext));
        }
        
        public virtual InfusionSoft.Definition.EmailTemplate GetEmailTemplate(int templateId)
        {
            return Invoke(d => d.GetEmailTemplate(ApiKey, templateId));
        }
        
        public virtual int GetOptStatus(string email)
        {
            return Invoke(d => d.GetOptStatus(ApiKey, email));
        }
        
        public virtual bool OptIn(string email, string optInReason)
        {
            return Invoke(d => d.OptIn(ApiKey, email, optInReason));
        }
        
        public virtual bool OptOut(string email, string optOutreason)
        {
            return Invoke(d => d.OptOut(ApiKey, email, optOutreason));
        }
        
        public virtual bool SendEmail(int[] contactList, string fromAddress, string toAddress, string ccAddresses, string bccAddresses, string contentType, string subject, string htmlBody, string textBody, int templateId)
        {
            return Invoke(d => d.SendEmail(ApiKey, contactList, fromAddress, toAddress, ccAddresses, bccAddresses, contentType, subject, htmlBody, textBody, templateId));
        }
        
        public virtual bool SendTemplate(int[] contactList, string templateId)
        {
            return Invoke(d => d.SendTemplate(ApiKey, contactList, templateId));
        }
        
        public virtual bool UpdateEmailTemplate(int templateId, string pieceTitle, string category, string fromAddress, string toAddress, string ccAddress, string bccAddresses, string subject, string textBody, string htmlBody, string contentType, string mergeContext)
        {
            return Invoke(d => d.UpdateEmailTemplate(ApiKey, templateId, pieceTitle, category, fromAddress, toAddress, ccAddress, bccAddresses, subject, textBody, htmlBody, contentType, mergeContext));
        }
    }
}
