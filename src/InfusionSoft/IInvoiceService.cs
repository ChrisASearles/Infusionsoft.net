//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfusionSoft
{
    using System;
    using System.Collections.Generic;
    
    
    public interface IInvoiceService : InfusionSoft.IService
    {
        
        int CreateBlankOrder(int contactId, string description, System.DateTime orderDate, int leadAffiliateId, int saleAffiliateId);
        
        bool AddOrderItem(int invoiceId, int productId, int type, double price, int quantity, string title, string description);
        
        InfusionSoft.Definition.ChargeInvoiceResult ChargeInvoice(int invoiceId, string notes, int creditCardId, int merchantAccountId, bool bypassCommissions);
        
        bool DeleteSubscription(int recurringOrderId);
        
        int AddRecurringOrder(int contactId, bool allowDuplicate, int cProgramId, int qty, double price, bool taxable, int merchantAccountId, int creditCardId, int affiliateId, int daysTillCharge);
        
        bool AddRecurringCommissionOverride(int recurringOrderId, int affiliateId, double amount, int payoutType, string description);
        
        int CreateInvoiceForRecurring(int recurringOrderId);
        
        bool AddManualPayment(int invoiceId, double amt, System.DateTime paymentDate, string paymentType, string paymentDescription, bool bypassCommissions);
        
        bool AddPaymentPlan(int invoiceId, bool autoCharge, int creditCardId, int merchantAccountId, int daysBetweenRetry, int maxRetry, double initialPmtAmt, System.DateTime initialPmtDate, System.DateTime planStartDate, int numPmts, int daysBetweenPmts);
        
        double CalculateAmountOwed(int invoiceId);
        
        object GetAllPaymentOptions();
        
        object GetPayments(int invoiceId);
        
        int LocateExistingCard(int contactId, int last4);
        
        bool RecalculateTax(int invoiceId);
        
        InfusionSoft.Definition.ValidateCreditCardResult ValidateCreditCard(int creditCardId);
        
        InfusionSoft.Definition.ValidateCreditCardResult ValidateCreditCard(InfusionSoft.Definition.CreditCardData data);
        
        object GetAllShippingOptions();
        
        bool UpdateJobRecurringNextBillDate(int recurringOrderId, System.DateTime nextBillDate);
        
        bool AddOrderCommissionOverride(int invoiceId, int affiliateId, int productId, int percentage, double amount, int payoutType, string description, System.DateTime date);
    }
}
