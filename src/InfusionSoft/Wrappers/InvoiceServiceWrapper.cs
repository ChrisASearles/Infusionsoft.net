//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfusionSoft
{
    using Definition;
    
    
    internal partial class InvoiceServiceWrapper : ServiceBase<IInvoiceServiceDefinition>, IInvoiceService
    {

        public InvoiceServiceWrapper(InfusionSoft.IInfusionSoftConfiguration configuration, IMethodListenerProvider listenerProvider) :
            base(configuration, listenerProvider)
        {
        }
        
        public virtual int CreateBlankOrder(int contactId, string description, System.DateTime orderDate, int leadAffiliateId, int saleAffiliateId)
        {
            return Invoke(d => d.CreateBlankOrder(ApiKey, contactId, description, orderDate, leadAffiliateId, saleAffiliateId));
        }
        
        public virtual bool AddOrderItem(int invoiceId, int productId, int type, double price, int quantity, string title, string description)
        {
            return Invoke(d => d.AddOrderItem(ApiKey, invoiceId, productId, type, price, quantity, title, description));
        }
        
        public virtual InfusionSoft.Definition.ChargeInvoiceResult ChargeInvoice(int invoiceId, string notes, int creditCardId, int merchantAccountId, bool bypassCommissions)
        {
            return Invoke(d => d.ChargeInvoice(ApiKey, invoiceId, notes, creditCardId, merchantAccountId, bypassCommissions));
        }
        
        public virtual bool DeleteSubscription(int recurringOrderId)
        {
            return Invoke(d => d.DeleteSubscription(ApiKey, recurringOrderId));
        }
        
        public virtual int AddRecurringOrder(int contactId, bool allowDuplicate, int cProgramId, int qty, double price, bool taxable, int merchantAccountId, int creditCardId, int affiliateId, int daysTillCharge)
        {
            return Invoke(d => d.AddRecurringOrder(ApiKey, contactId, allowDuplicate, cProgramId, qty, price, taxable, merchantAccountId, creditCardId, affiliateId, daysTillCharge));
        }
        
        public virtual bool AddRecurringCommissionOverride(int recurringOrderId, int affiliateId, double amount, int payoutType, string description)
        {
            return Invoke(d => d.AddRecurringCommissionOverride(ApiKey, recurringOrderId, affiliateId, amount, payoutType, description));
        }
        
        public virtual int CreateInvoiceForRecurring(int recurringOrderId)
        {
            return Invoke(d => d.CreateInvoiceForRecurring(ApiKey, recurringOrderId));
        }
        
        public virtual bool AddManualPayment(int invoiceId, double amt, System.DateTime paymentDate, string paymentType, string paymentDescription, bool bypassCommissions)
        {
            return Invoke(d => d.AddManualPayment(ApiKey, invoiceId, amt, paymentDate, paymentType, paymentDescription, bypassCommissions));
        }
        
        public virtual bool AddPaymentPlan(int invoiceId, bool autoCharge, int creditCardId, int merchantAccountId, int daysBetweenRetry, int maxRetry, double initialPmtAmt, System.DateTime initialPmtDate, System.DateTime planStartDate, int numPmts, int daysBetweenPmts)
        {
            return Invoke(d => d.AddPaymentPlan(ApiKey, invoiceId, autoCharge, creditCardId, merchantAccountId, daysBetweenRetry, maxRetry, initialPmtAmt, initialPmtDate, planStartDate, numPmts, daysBetweenPmts));
        }
        
        public virtual double CalculateAmountOwed(int invoiceId)
        {
            return Invoke(d => d.CalculateAmountOwed(ApiKey, invoiceId));
        }
        
        public virtual object GetAllPaymentOptions()
        {
            return Invoke(d => d.GetAllPaymentOptions(ApiKey));
        }
        
        public virtual object GetPayments(int invoiceId)
        {
            return Invoke(d => d.GetPayments(ApiKey, invoiceId));
        }
        
        public virtual int LocateExistingCard(int contactId, int last4)
        {
            return Invoke(d => d.LocateExistingCard(ApiKey, contactId, last4));
        }
        
        public virtual bool RecalculateTax(int invoiceId)
        {
            return Invoke(d => d.RecalculateTax(ApiKey, invoiceId));
        }
        
        public virtual InfusionSoft.Definition.ValidateCreditCardResult ValidateCreditCard(int creditCardId)
        {
            return Invoke(d => d.ValidateCreditCard(ApiKey, creditCardId));
        }
        
        public virtual InfusionSoft.Definition.ValidateCreditCardResult ValidateCreditCard(InfusionSoft.Definition.CreditCardData data)
        {
            return Invoke(d => d.ValidateCreditCard(ApiKey, data));
        }
        
        public virtual object GetAllShippingOptions()
        {
            return Invoke(d => d.GetAllShippingOptions(ApiKey));
        }
        
        public virtual bool UpdateJobRecurringNextBillDate(int recurringOrderId, System.DateTime nextBillDate)
        {
            return Invoke(d => d.UpdateJobRecurringNextBillDate(ApiKey, recurringOrderId, nextBillDate));
        }
        
        public virtual bool AddOrderCommissionOverride(int invoiceId, int affiliateId, int productId, int percentage, double amount, int payoutType, string description, System.DateTime date)
        {
            return Invoke(d => d.AddOrderCommissionOverride(ApiKey, invoiceId, affiliateId, productId, percentage, amount, payoutType, description, date));
        }
    }
}
